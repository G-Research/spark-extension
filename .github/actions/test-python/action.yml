name: 'Test Python'
author: 'EnricoMi'
description: 'A GitHub Action that tests Python spark-extension'

# pyspark is not available for snapshots or scala other than 2.12
# we would have to compile spark from sources for this, not worth it
# so this action only works with scala 2.12 and non-snapshot spark versions
inputs:
  spark-version:
    description: Spark version, e.g. 3.4.0
    required: true
  scala-version:
    description: Scala version, e.g. 2.12.15
    required: true
  spark-compat-version:
    description: Spark compatibility version, e.g. 3.4
    required: true
  scala-compat-version:
    description: Scala compatibility version, e.g. 2.12
    required: true
  python-version:
    description: Python version, e.g. 3.8
    required: true

runs:
  using: 'composite'
  steps:
  - name: Set versions in pom.xml
    run: |
      ./set-version.sh ${{ inputs.spark-version }} ${{ inputs.scala-version }}
      git diff
    shell: bash

  - name: Fetch Binaries Artifact
    uses: actions/download-artifact@v3
    with:
      name: Binaries-${{ inputs.spark-version }}-${{ inputs.scala-version }}
      path: .

  - name: Cache Maven packages
    uses: actions/cache@v3
    with:
      path: ~/.m2/repository
      key: ${{ runner.os }}-mvn-build-${{ inputs.spark-version }}-${{ inputs.scala-version }}-${{ hashFiles('pom.xml') }}
      restore-keys: ${{ runner.os }}-mvn-build-${{ inputs.spark-version }}-${{ inputs.scala-version }}-

  - name: Setup JDK 1.8
    uses: actions/setup-java@v3
    with:
      java-version: '8'
      distribution: 'zulu'

  - name: Cache Pip packages
    uses: actions/cache@v3
    with:
      path: ~/.cache/pip
      key: ${{ runner.os }}-pip-test-${{ inputs.python-version }}-${{ hashFiles('requirements.txt') }}
      restore-keys: ${{ runner.os }}-pip-test-${{ inputs.python-version }}-

  - name: Setup Python
    uses: actions/setup-python@v4
    with:
      python-version: ${{ inputs.python-version }}

  - name: Install Python dependencies
    run: |
      python -m pip install --upgrade pip
      pip install pypandoc
      pip install -r python/requirements-${{ inputs.spark-compat-version }}_${{ inputs.scala-compat-version }}.txt
      pip install pytest
    shell: bash

  - name: Python Tests
    env:
      PYTHONPATH: python:python/test
    run: |
      python -m pytest python/test --junit-xml pytest.xml
    shell: bash

  - name: Upload Unit Test Results
    if: always()
    uses: actions/upload-artifact@v3
    with:
      name: Unit Test Results (Spark ${{ inputs.spark-version }} Scala ${{ inputs.scala-version }} Python ${{ inputs.python-version }})
      path: pytest.xml

branding:
  icon: 'check-circle'
  color: 'green'
